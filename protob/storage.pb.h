// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef PROTOBUF_storage_2eproto__INCLUDED
#define PROTOBUF_storage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_storage_2eproto();
void protobuf_AssignDesc_storage_2eproto();
void protobuf_ShutdownFile_storage_2eproto();

class Storage;

// ===================================================================

class Storage : public ::google::protobuf::Message {
 public:
  Storage();
  virtual ~Storage();

  Storage(const Storage& from);

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Storage& default_instance();

  void Swap(Storage* other);

  // implements Message ----------------------------------------------

  Storage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Storage& from);
  void MergeFrom(const Storage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional .HDNodeType node = 2;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 2;
  inline const ::HDNodeType& node() const;
  inline ::HDNodeType* mutable_node();
  inline ::HDNodeType* release_node();
  inline void set_allocated_node(::HDNodeType* node);

  // optional string mnemonic = 3;
  inline bool has_mnemonic() const;
  inline void clear_mnemonic();
  static const int kMnemonicFieldNumber = 3;
  inline const ::std::string& mnemonic() const;
  inline void set_mnemonic(const ::std::string& value);
  inline void set_mnemonic(const char* value);
  inline void set_mnemonic(const char* value, size_t size);
  inline ::std::string* mutable_mnemonic();
  inline ::std::string* release_mnemonic();
  inline void set_allocated_mnemonic(::std::string* mnemonic);

  // optional bool passphrase_protection = 4;
  inline bool has_passphrase_protection() const;
  inline void clear_passphrase_protection();
  static const int kPassphraseProtectionFieldNumber = 4;
  inline bool passphrase_protection() const;
  inline void set_passphrase_protection(bool value);

  // optional uint32 pin_failed_attempts = 5;
  inline bool has_pin_failed_attempts() const;
  inline void clear_pin_failed_attempts();
  static const int kPinFailedAttemptsFieldNumber = 5;
  inline ::google::protobuf::uint32 pin_failed_attempts() const;
  inline void set_pin_failed_attempts(::google::protobuf::uint32 value);

  // optional string pin = 6;
  inline bool has_pin() const;
  inline void clear_pin();
  static const int kPinFieldNumber = 6;
  inline const ::std::string& pin() const;
  inline void set_pin(const ::std::string& value);
  inline void set_pin(const char* value);
  inline void set_pin(const char* value, size_t size);
  inline ::std::string* mutable_pin();
  inline ::std::string* release_pin();
  inline void set_allocated_pin(::std::string* pin);

  // optional string language = 7;
  inline bool has_language() const;
  inline void clear_language();
  static const int kLanguageFieldNumber = 7;
  inline const ::std::string& language() const;
  inline void set_language(const ::std::string& value);
  inline void set_language(const char* value);
  inline void set_language(const char* value, size_t size);
  inline ::std::string* mutable_language();
  inline ::std::string* release_language();
  inline void set_allocated_language(::std::string* language);

  // optional string label = 8;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 8;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // optional bool imported = 9;
  inline bool has_imported() const;
  inline void clear_imported();
  static const int kImportedFieldNumber = 9;
  inline bool imported() const;
  inline void set_imported(bool value);

  // @@protoc_insertion_point(class_scope:Storage)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_node();
  inline void clear_has_node();
  inline void set_has_mnemonic();
  inline void clear_has_mnemonic();
  inline void set_has_passphrase_protection();
  inline void clear_has_passphrase_protection();
  inline void set_has_pin_failed_attempts();
  inline void clear_has_pin_failed_attempts();
  inline void set_has_pin();
  inline void clear_has_pin();
  inline void set_has_language();
  inline void clear_has_language();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_imported();
  inline void clear_has_imported();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::HDNodeType* node_;
  ::std::string* mnemonic_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 pin_failed_attempts_;
  ::std::string* pin_;
  ::std::string* language_;
  ::std::string* label_;
  bool passphrase_protection_;
  bool imported_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_storage_2eproto();
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static Storage* default_instance_;
};
// ===================================================================


// ===================================================================

// Storage

// required uint32 version = 1;
inline bool Storage::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Storage::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Storage::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Storage::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 Storage::version() const {
  return version_;
}
inline void Storage::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// optional .HDNodeType node = 2;
inline bool Storage::has_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Storage::set_has_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Storage::clear_has_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Storage::clear_node() {
  if (node_ != NULL) node_->::HDNodeType::Clear();
  clear_has_node();
}
inline const ::HDNodeType& Storage::node() const {
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::HDNodeType* Storage::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::HDNodeType;
  return node_;
}
inline ::HDNodeType* Storage::release_node() {
  clear_has_node();
  ::HDNodeType* temp = node_;
  node_ = NULL;
  return temp;
}
inline void Storage::set_allocated_node(::HDNodeType* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
}

// optional string mnemonic = 3;
inline bool Storage::has_mnemonic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Storage::set_has_mnemonic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Storage::clear_has_mnemonic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Storage::clear_mnemonic() {
  if (mnemonic_ != &::google::protobuf::internal::kEmptyString) {
    mnemonic_->clear();
  }
  clear_has_mnemonic();
}
inline const ::std::string& Storage::mnemonic() const {
  return *mnemonic_;
}
inline void Storage::set_mnemonic(const ::std::string& value) {
  set_has_mnemonic();
  if (mnemonic_ == &::google::protobuf::internal::kEmptyString) {
    mnemonic_ = new ::std::string;
  }
  mnemonic_->assign(value);
}
inline void Storage::set_mnemonic(const char* value) {
  set_has_mnemonic();
  if (mnemonic_ == &::google::protobuf::internal::kEmptyString) {
    mnemonic_ = new ::std::string;
  }
  mnemonic_->assign(value);
}
inline void Storage::set_mnemonic(const char* value, size_t size) {
  set_has_mnemonic();
  if (mnemonic_ == &::google::protobuf::internal::kEmptyString) {
    mnemonic_ = new ::std::string;
  }
  mnemonic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Storage::mutable_mnemonic() {
  set_has_mnemonic();
  if (mnemonic_ == &::google::protobuf::internal::kEmptyString) {
    mnemonic_ = new ::std::string;
  }
  return mnemonic_;
}
inline ::std::string* Storage::release_mnemonic() {
  clear_has_mnemonic();
  if (mnemonic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mnemonic_;
    mnemonic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Storage::set_allocated_mnemonic(::std::string* mnemonic) {
  if (mnemonic_ != &::google::protobuf::internal::kEmptyString) {
    delete mnemonic_;
  }
  if (mnemonic) {
    set_has_mnemonic();
    mnemonic_ = mnemonic;
  } else {
    clear_has_mnemonic();
    mnemonic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool passphrase_protection = 4;
inline bool Storage::has_passphrase_protection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Storage::set_has_passphrase_protection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Storage::clear_has_passphrase_protection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Storage::clear_passphrase_protection() {
  passphrase_protection_ = false;
  clear_has_passphrase_protection();
}
inline bool Storage::passphrase_protection() const {
  return passphrase_protection_;
}
inline void Storage::set_passphrase_protection(bool value) {
  set_has_passphrase_protection();
  passphrase_protection_ = value;
}

// optional uint32 pin_failed_attempts = 5;
inline bool Storage::has_pin_failed_attempts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Storage::set_has_pin_failed_attempts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Storage::clear_has_pin_failed_attempts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Storage::clear_pin_failed_attempts() {
  pin_failed_attempts_ = 0u;
  clear_has_pin_failed_attempts();
}
inline ::google::protobuf::uint32 Storage::pin_failed_attempts() const {
  return pin_failed_attempts_;
}
inline void Storage::set_pin_failed_attempts(::google::protobuf::uint32 value) {
  set_has_pin_failed_attempts();
  pin_failed_attempts_ = value;
}

// optional string pin = 6;
inline bool Storage::has_pin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Storage::set_has_pin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Storage::clear_has_pin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Storage::clear_pin() {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    pin_->clear();
  }
  clear_has_pin();
}
inline const ::std::string& Storage::pin() const {
  return *pin_;
}
inline void Storage::set_pin(const ::std::string& value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void Storage::set_pin(const char* value) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(value);
}
inline void Storage::set_pin(const char* value, size_t size) {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  pin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Storage::mutable_pin() {
  set_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    pin_ = new ::std::string;
  }
  return pin_;
}
inline ::std::string* Storage::release_pin() {
  clear_has_pin();
  if (pin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pin_;
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Storage::set_allocated_pin(::std::string* pin) {
  if (pin_ != &::google::protobuf::internal::kEmptyString) {
    delete pin_;
  }
  if (pin) {
    set_has_pin();
    pin_ = pin;
  } else {
    clear_has_pin();
    pin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string language = 7;
inline bool Storage::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Storage::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Storage::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Storage::clear_language() {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    language_->clear();
  }
  clear_has_language();
}
inline const ::std::string& Storage::language() const {
  return *language_;
}
inline void Storage::set_language(const ::std::string& value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void Storage::set_language(const char* value) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(value);
}
inline void Storage::set_language(const char* value, size_t size) {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  language_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Storage::mutable_language() {
  set_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    language_ = new ::std::string;
  }
  return language_;
}
inline ::std::string* Storage::release_language() {
  clear_has_language();
  if (language_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = language_;
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Storage::set_allocated_language(::std::string* language) {
  if (language_ != &::google::protobuf::internal::kEmptyString) {
    delete language_;
  }
  if (language) {
    set_has_language();
    language_ = language;
  } else {
    clear_has_language();
    language_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string label = 8;
inline bool Storage::has_label() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Storage::set_has_label() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Storage::clear_has_label() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Storage::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Storage::label() const {
  return *label_;
}
inline void Storage::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Storage::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Storage::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Storage::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Storage::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Storage::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool imported = 9;
inline bool Storage::has_imported() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Storage::set_has_imported() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Storage::clear_has_imported() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Storage::clear_imported() {
  imported_ = false;
  clear_has_imported();
}
inline bool Storage::imported() const {
  return imported_;
}
inline void Storage::set_imported(bool value) {
  set_has_imported();
  imported_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_storage_2eproto__INCLUDED
